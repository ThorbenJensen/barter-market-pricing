# select observations on the right innovation
dat <- data[data$innovation == innovation,]
# quartile function
median.quartile <- function(x){
out <- quantile(x, probs = c(0.25,0.5,0.75))
names(out) <- c("ymin","y","ymax")
return(out)
}
uci <- function(y){max(y)}
lci <- function(y){min(y)}
# plot product diffusion
p <- ggplot(data=NULL, aes(x=X.step.)) +
stat_summary(data=dat, aes(y=adoption_lead), fun.data = "mean_cl_boot", size = .5, geom="line") +
stat_summary(data=dat, aes(y=adoption_main), fun.data = "mean_cl_boot", size = .5, geom="line") +
stat_summary(data=dat, aes(y=adoption_hed ), fun.data = "mean_cl_boot", size = .5, geom="line") +
stat_summary(data=dat[dat$X.step. %in% seq(0,15,by=5),], aes(y=adoption_lead),
fun.data = median.quartile,
geom = "errorbar",
width = 1,
size = .5,
color = "black") +
stat_summary(data=dat[dat$X.step. %in% seq(0,15,by=5),], aes(y=adoption_main),
fun.data = median.quartile,
geom = "errorbar",
width = 1,
size = .5,
color = "black") +
stat_summary(data=dat[dat$X.step. %in% seq(0,15,by=5),], aes(y=adoption_hed),
fun.data = median.quartile,
geom = "errorbar",
width = 1,
size = .5,
color = "black") +
stat_summary(data=dat[dat$X.step. %in% seq(5,15,by=5),], aes(y=adoption_lead, shape = "15"),
size = 2, fun.data = "mean_cl_boot", geom = "point") +
stat_summary(data=dat[dat$X.step. %in% seq(5,15,by=5),], aes(y=adoption_main, shape = "16"),
size = 2, fun.data = "mean_cl_boot", geom = "point") +
stat_summary(data=dat[dat$X.step. %in% seq(5,15,by=5),], aes(y=adoption_hed, shape = "17"),
size = 2, fun.data = "mean_cl_boot", geom = "point") +
theme_bw(base_size = 8) +
scale_shape_manual("Konsumentengruppe",
values=c(15,17,16),
labels=c("Leading Lifestyles", "Mainstream", "Hedonists")) +
coord_cartesian(ylim = c(0,100)) +
ylab("Adoption share (%)") +
xlab("Year")
#geom_text(aes(label=innovation, x=0, y=95), size=2.8, hjust=0)
p # return plot (now in variable p)
}
# iterate over all innovations (as defined at the very top of this script)
for (innovation in innovations) {
pdf(paste(folder,innovation,".pdf",sep=""), width = 4, height = 4)  # desclare where to save file (will be saved in folder defined above)
print(plot_diffusion(innovation))                                   # make plot
dev.off()                                                           # save file
}
# required libraries
library(lattice)
library(ggplot2)
# library(Hmisc)
plot_diffusion <- function(innovation) {
# select observations on the right innovation
dat <- data[data$innovation == innovation,]
# quartile function
median.quartile <- function(x){
out <- quantile(x, probs = c(0.25,0.5,0.75))
names(out) <- c("ymin","y","ymax")
return(out)
}
uci <- function(y){max(y)}
lci <- function(y){min(y)}
# plot product diffusion
p <- ggplot(data=NULL, aes(x=X.step.)) +
stat_summary(data=dat, aes(y=adoption_lead), fun.data = "mean_cl_boot", size = .5, geom="line") +
stat_summary(data=dat, aes(y=adoption_main), fun.data = "mean_cl_boot", size = .5, geom="line") +
stat_summary(data=dat, aes(y=adoption_hed ), fun.data = "mean_cl_boot", size = .5, geom="line") +
stat_summary(data=dat[dat$X.step. %in% seq(0,15,by=5),], aes(y=adoption_lead),
fun.data = median.quartile,
geom = "errorbar",
width = 1,
size = .5,
color = "black") +
stat_summary(data=dat[dat$X.step. %in% seq(0,15,by=5),], aes(y=adoption_main),
fun.data = median.quartile,
geom = "errorbar",
width = 1,
size = .5,
color = "black") +
stat_summary(data=dat[dat$X.step. %in% seq(0,15,by=5),], aes(y=adoption_hed),
fun.data = median.quartile,
geom = "errorbar",
width = 1,
size = .5,
color = "black") +
stat_summary(data=dat[dat$X.step. %in% seq(5,15,by=5),], aes(y=adoption_lead, shape = "15"),
size = 2, fun.data = "mean_cl_boot", geom = "point") +
stat_summary(data=dat[dat$X.step. %in% seq(5,15,by=5),], aes(y=adoption_main, shape = "16"),
size = 2, fun.data = "mean_cl_boot", geom = "point") +
stat_summary(data=dat[dat$X.step. %in% seq(5,15,by=5),], aes(y=adoption_hed, shape = "17"),
size = 2, fun.data = "mean_cl_boot", geom = "point") +
theme_bw(base_size = 8) +
scale_shape_manual("Konsumentengruppe",
values=c(15,17,16),
labels=c("Leading Lifestyles", "Mainstream", "Hedonists")) +
coord_cartesian(ylim = c(0,100)) +
ylab("Adoption share (%)") +
xlab("Year") +
scale_y_continuous(breaks=pretty_breaks(n=10))
#geom_text(aes(label=innovation, x=0, y=95), size=2.8, hjust=0)
p # return plot (now in variable p)
}
# iterate over all innovations (as defined at the very top of this script)
for (innovation in innovations) {
pdf(paste(folder,innovation,".pdf",sep=""), width = 4, height = 4)  # desclare where to save file (will be saved in folder defined above)
print(plot_diffusion(innovation))                                   # make plot
dev.off()                                                           # save file
}
1:10:100
1:100:10
seq(1,10,100)
seq(1,100,10)
seq(0,100,10)
# required libraries
library(lattice)
library(ggplot2)
# library(Hmisc)
plot_diffusion <- function(innovation) {
# select observations on the right innovation
dat <- data[data$innovation == innovation,]
# quartile function
median.quartile <- function(x){
out <- quantile(x, probs = c(0.25,0.5,0.75))
names(out) <- c("ymin","y","ymax")
return(out)
}
uci <- function(y){max(y)}
lci <- function(y){min(y)}
# plot product diffusion
p <- ggplot(data=NULL, aes(x=X.step.)) +
stat_summary(data=dat, aes(y=adoption_lead), fun.data = "mean_cl_boot", size = .5, geom="line") +
stat_summary(data=dat, aes(y=adoption_main), fun.data = "mean_cl_boot", size = .5, geom="line") +
stat_summary(data=dat, aes(y=adoption_hed ), fun.data = "mean_cl_boot", size = .5, geom="line") +
stat_summary(data=dat[dat$X.step. %in% seq(0,15,by=5),], aes(y=adoption_lead),
fun.data = median.quartile,
geom = "errorbar",
width = 1,
size = .5,
color = "black") +
stat_summary(data=dat[dat$X.step. %in% seq(0,15,by=5),], aes(y=adoption_main),
fun.data = median.quartile,
geom = "errorbar",
width = 1,
size = .5,
color = "black") +
stat_summary(data=dat[dat$X.step. %in% seq(0,15,by=5),], aes(y=adoption_hed),
fun.data = median.quartile,
geom = "errorbar",
width = 1,
size = .5,
color = "black") +
stat_summary(data=dat[dat$X.step. %in% seq(5,15,by=5),], aes(y=adoption_lead, shape = "15"),
size = 2, fun.data = "mean_cl_boot", geom = "point") +
stat_summary(data=dat[dat$X.step. %in% seq(5,15,by=5),], aes(y=adoption_main, shape = "16"),
size = 2, fun.data = "mean_cl_boot", geom = "point") +
stat_summary(data=dat[dat$X.step. %in% seq(5,15,by=5),], aes(y=adoption_hed, shape = "17"),
size = 2, fun.data = "mean_cl_boot", geom = "point") +
theme_bw(base_size = 8) +
scale_shape_manual("Konsumentengruppe",
values=c(15,17,16),
labels=c("Leading Lifestyles", "Mainstream", "Hedonists")) +
coord_cartesian(ylim = c(0,100)) +
ylab("Adoption share (%)") +
xlab("Year") +
scale_y_continuous(breaks = seq(0,100,10))
#geom_text(aes(label=innovation, x=0, y=95), size=2.8, hjust=0)
p # return plot (now in variable p)
}
# iterate over all innovations (as defined at the very top of this script)
for (innovation in innovations) {
pdf(paste(folder,innovation,".pdf",sep=""), width = 4, height = 4)  # desclare where to save file (will be saved in folder defined above)
print(plot_diffusion(innovation))                                   # make plot
dev.off()                                                           # save file
}
installed.packages("qgraph")
install.packages("qgraph")
)
test <- function() {}
library(dplyr)
install.packages("dplyr")
install.packages(devtools)
install.packages("devtools")
devtools::install_github("hadley/multidplyr")
library(devtools)
install.packages("devtools")
install.packages("devtools")
library(devtools)
devtools::install_github("hadley/multidplyr")
library(multiplyr)
library(multidplyr)
library(nycflights13)
install.packages("nycflights13")
library(nycflights13)
flights1 <- partition(flights, flight)
head(flights)
colnames(flights)
View(flights)
?partition
flights$flight
View(flights)
flights1 <- partition(flights, flight)
flights1
flights1$cluster
flights1$partitions
flights1$groups
flights1[1]
flights1[2]
flights1[3]
collect(flights1)
collect(flights1)
??collect
library(dplyr)
collect(flights1)
flights1
collect(flights1)
?dplyr:collect
?dplyr::collect
flights2 <- summarise(flights1, dep_delay = mean(dep_delay, na.rm = TRUE))
collect(flights2)
system.time{
flights2 <- summarise(flights1, dep_delay = mean(dep_delay, na.rm = TRUE))
collect(flights2)
}
?system.time
system.time(
{
flights2 <- summarise(flights1, dep_delay = mean(dep_delay, na.rm = TRUE))
collect(flights2)
}
)
system.time{
)
summarise(flights, dep_delay = mean(dep_delay, na.rm = TRUE))
summarise(flights, dep_delay = mean(dep_delay, na.rm = TRUE))
system.time({
)
system.time(
{
summarise(flights, dep_delay = mean(dep_delay, na.rm = TRUE))
}
)
system.time(
{
flights2 <- summarise(flights1, dep_delay = mean(dep_delay, na.rm = TRUE))
collect(flights2)
}
)
system.time(
{
flights2 <- summarise(flights1, dep_delay = mean(dep_delay, na.rm = TRUE))
collect(flights2)
}
)
flights1 <- partition(flights, flight)
system.time(
{
flights2 <- summarise(flights1, dep_delay = mean(dep_delay, na.rm = TRUE))
collect(flights2)
}
)
system.time(
{
summarise(flights, dep_delay = mean(dep_delay, na.rm = TRUE))
}
)
system.time(
{
flights2 <- summarise(flights1, dep_delay = mean(dep_delay, na.rm = TRUE))
collect(flights2)
}
)
system.time(
{
summarise(flights, dep_delay = mean(dep_delay, na.rm = TRUE))
}
)
print("a")
### TEST2 ----------------------------------------------------------
print("b")
source('~/tmp/r_tests.R', echo=TRUE)
print("a")
print("a")
### TEST -----------------------------------------------------------
### TEST -----------------------------------------------------------
### TEST -----------------------------------------------------------
print("a")
print("a2")
### TEST2 ----------------------------------------------------------
print("b")
### TEST -----------------------------------------------------------
### TEST -----------------------------------------------------------
print("a")
print("a2")
### TEST2 ----------------------------------------------------------
print("b")
-----------------------------------------------------------
print("a")
print("a2")
### TEST -----------------------------------------------------------
print("a")
print("a2")
### TEST -----------------------------------------------------------
print("a")
print("a2")
### TEST -----------------------------------------------------------
print("a")
print("a2")
### TEST2 ----------------------------------------------------------
print("b")
### TEST -----------------------------------------------------------
print("a")
print("a2")
source('~/tmp/r_tests.R', echo=TRUE)
### TEST -----------------------------------------------------------
print("a")
print("a2")
### TEST2 ----------------------------------------------------------
print("b")
### TEST -----------------------------------------------------------
print("a")
print("a2")
### TEST2 ----------------------------------------------------------
print("b")
print("a")
print("2")
# test -------------------------------------------------------------------
# test -------------------------------------------------------------------
# test -------------------------------------------------------------------
print("1")
print("2")
### TEST ###########################################
print("a")
print("a2")
### TEST ###########################################
print("a")
print("a2")
print("a")
print("a2")
debugSource('~/tmp/r_tests.R')
debugSource('~/tmp/r_tests.R')
install.packages("SQLite")
install.packages("SQLite")
install.packages("SQLite")
version
version
get_exchange_rates(transactions)
get_exchange_rates <- function(transactions) {
fit <- lm(c ~ a + b + 0, data = transactions)
# return estimated values of other items
result <- fit$coefficients * -1
return(result)
}
print(paste("Value of goods A and B, expressed relative to C:",
get_exchange_rates(transactions)))
transactions <-
data.frame(a = c(1, 0, 1),
b = c(-1, 1, 1),
c = c(0, -3, -6))
print(paste("Value of goods A and B, expressed relative to C:",
get_exchange_rates(transactions)))
get_exchange_rates(transactions)
print.data.frame(get_exchange_rates(transactions))
get_exchange_rates(transactions)
print.data.frame(get_exchange_rates(transactions))
print.data.frame(iris)
result <- get_exchange_rates(transactions)
result
print.data.frame(result)
get_exchange_rates(transactions)
result[1,]
result[,]
result[1,1]
result["a",1]
result[1,"a"]
dim(result)
summary(result)
data.frame(result)
print.data.frame(data.frame(result))
exchange_rates <- get_exchange_rates(transactions)
print.data.frame(data.frame(result))
print("Value of goods A and B, expressed relative to C:")
exchange_rates <- get_exchange_rates(transactions)
print.data.frame(data.frame(result))
print("Value of goods A and B, expressed relative to C:")
exchange_rates <- get_exchange_rates(transactions)
print.data.frame(data.frame(result))
fit$coefficients * -1
data.frame(a = c(1, 0, 1),
b = c(-1, 1, 1),
c = c(0, -3, -6))
install.packages("testthat")
library(testthat)
m <- function(a, b) {
return(a * b)
}
m(2,1)
m(2,6)
expect_that(m(2, 3), equals(6))
expect_that(m(2, 3), equals(5))
expect_that(m(2, 3), equals(6))
expect_that(m(2, 3), equals(6 + 1e-7))
expect_that(m(2, 3), equals(6 + 10e-7))
expect_that(m(2, 3), equals(6 + (1e-7)))
expect_that(m(2, 3), equals(6 + (1e-9)))
expect_that(m(2, 3), equals(6 + (1e-8)))
expect_that(m(2, 3), is_identical_to(6 + (1e-8)))
expect_that(m(2, 3), is_identical_to(6 + (1e-8)))
expect_that(m(2, 3), is_identical_to(6))
m("2", "3")
expect_error(m("2", "3"))
expect_error(m("2", "3"))
expect_error(m(2, 3))
expect_error(m("2", "3"))
expect_error(m(2, 3))
?expect_gt
expect_greater_10 <- function(obj) {
expect_gt(object = obj, expected = 10)
}
expect_greater_10(m(1,1))
return(expect_gt(object = obj, expected = 10))
expect_greater_10 <- function(obj) {
return(expect_gt(object = obj, expected = 10))
}
expect_greater_10(m(1,1))
expect_greater_10 <- function(obj) {
expect_gt(object = obj, expected = 10)
}
expect_greater_10(m(1,1))
expect_greater_10(m(1,10))
expect_greater_10(m(3,4))
expect_greater_10(m(2,4))
expect_greater_10(m(3,4))
source('~/it/github/barter-market-prizing/src/test_prizing_from_observations.R')
expect_greater_10(9)
expect_greater_10(11)
expect_greater_10(9)
getwd()
setwd("it/github/barter-market-prizing/src/")
test_dir(".")
?test_dir
transactions <- data.frame(a = c(1, 0, 0), b = c(-1, 0, 0))
transactions
get_exchange_rates(transactions)
transactions <- data.frame(a = c(1, 0), b = c(-1, 0))
get_exchange_rates(transactions)
transactions <- data.frame(a = c(1, 0, 0), b = c(-1, 0, 0), c = c(0, 0, 0))
get_exchange_rates(transactions)
transactions <- data.frame(a = c(1, 0, 0), b = c(0, 0, 0), c = c(-1, 0, 0))
get_exchange_rates(transactions)
result <- get_exchange_rates(transactions)
result
result[1,1]
about(result)
is.data.frame(result)
source('~/it/github/barter-market-prizing/src/prizing_from_observations.R')
get_exchange_rates <- function(transactions) {
fit <- lm(c ~ a + b + 0, data = transactions)
# return estimated values of other items
return(fit$coefficients * -1)
}
get_exchange_rates(transactions)
library(dplyr)
get_exchange_rates(transactions) %>% data.frame
get_exchange_rates <- function(transactions) {
fit <- lm(c ~ a + b + 0, data = transactions)
# return estimated values of other items
result <- fit$coefficients * -1
return(data.frame(result))
}
get_exchange_rates
get_exchange_rates(transactions)
print("Value of goods A and B, expressed relative to C:")
exchange_rates <- get_exchange_rates(transactions)
print.data.frame(result)
print.data.frame(exchange_rates)
result <- get_exchange_rates(transactions)
transactions <- data.frame(a = c(1, 0, 0), b = c(0, 0, 0), c = c(-1, 0, 0))
result <- get_exchange_rates(transactions)
is.data.frame(result)
result
result[1,1]
result["a","result"] == 1
value_a <- result["a","result"] == 1
value_a <- result["a","result"]
result["a",]
result <- get_exchange_rates(transactions)
value_a <- result["a",]
expect(value_a, equal(1))
expect(value_a, is_equal(1))
expect(value_a, equals(1))
value_a
expect_that(value_a, equals(1))
?sys.source
source("prizing_from_observations.R")
transactions <- data.frame(a = c(1, 0, 0), b = c(0, 0, 0), c = c(-1, 0, 0))
transactions <- data.frame(a = c(1, 0, 0), b = c(0, 0, 0), c = c(-1, 0, 0))
result <- get_exchange_rates(transactions)
value_a <- result["a",]
expect_that(value_a, equals(1))
source('~/it/github/barter-market-prizing/src/test_prizing_from_observations.R')
source('~/it/github/barter-market-prizing/src/test_demo.R')
autotest
packages.install("autotest")
install.packages("autotest")
